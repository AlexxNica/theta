namespace Layout {
	const CODE_POINTS_WITH_SPACES = {
		'=': 0,
		'<': 0,
		'>': 0,
		'≤': 0,
		'≥': 0,
	}

	################################################################################

	class Box {
		var x = 0.0
		var y = 0.0
		var width = 0.0
		var upperHeight = 0.0
		var lowerHeight = 0.0

		def height double {
			return upperHeight + lowerHeight
		}
	}

	################################################################################

	interface Renderer {
		def measureGlyph(codePoint int) double
		def addGlyph(codePoint int, x double, y double, scale double) Glyph
		def addLine(ax double, ay double, bx double, by double)
	}

	################################################################################

	class Anchor {
		const _root Container
		var globalIndex = 0
		var nestedContainer Container = null
		var indexInNestedContainer = 0

		def new(root Container) {
			_root = root
			updateNestedState
		}

		def render(renderer Renderer) {
			var x = nestedContainer.box.x
			for i in 0..indexInNestedContainer {
				x += nestedContainer.children[i].box.width
			}
			if nestedContainer.children.isEmpty {
        x += nestedContainer.box.width / 2
      }
			renderer.addLine(x, nestedContainer.box.y, x, nestedContainer.box.y + nestedContainer.box.height)
		}

		def updateNestedState {
			_updateNestedState(_root, globalIndex)
		}

		def _updateNestedState(container Container, index int) {
			assert(0 <= index && index < container.anchorCount)
			var count = container.children.count

			# Search the children for the anchor
			for i in 0..count {
				var child = container.children[i]

				# Check before this child
				if index == 0 {
					nestedContainer = container
					indexInNestedContainer = i
					return
				}
				index--

				# Check inside this child
				if index < child.anchorCount {
					if child is Fraction {
						var fraction = child as Fraction
						if index < fraction.top.anchorCount {
							_updateNestedState(fraction.top, index)
						} else {
							_updateNestedState(fraction.bottom, index - fraction.top.anchorCount)
						}
						return
					} else {
						assert(false)
					}
				}
				index -= child.anchorCount
			}

			# Must be after the last child
			assert(index == 0)
			nestedContainer = container
			indexInNestedContainer = count
		}
	}

	################################################################################

	class Element {
		var box = Box.new
		var anchorCount = 0

		def clone Element
		def updateAnchorCount
		def calculateSize(renderer Renderer, parent Container, fontSize double)
		def updateLayout(x double, y double)
		def render(renderer Renderer)
	}

	################################################################################

	class Character : Element {
		var codePoint int
		var paddingLeft = 0.0

		over clone Element {
			return new(codePoint)
		}

		over updateAnchorCount {
			anchorCount = 0
		}

		over calculateSize(renderer Renderer, parent Container, fontSize double) {
			box.width = renderer.measureGlyph(codePointWithSubstitution) * fontSize
			paddingLeft = 0

			if codePoint == ',' {
				box.width += renderer.measureGlyph(' ') * fontSize
			}

			else if codePoint in CODE_POINTS_WITH_SPACES || (codePoint == '+' || codePoint == '-') && self != parent.children.first {
				paddingLeft = renderer.measureGlyph(' ') * fontSize
				box.width += paddingLeft * 2
			}

			box.upperHeight = fontSize / 2
			box.lowerHeight = fontSize / 2
		}

		over updateLayout(x double, y double) {
			box.x = x
			box.y = y
		}

		over render(renderer Renderer) {
			renderer.addGlyph(codePointWithSubstitution, box.x + paddingLeft, box.y, box.height)
		}

		def codePointWithSubstitution int {
			if codePoint == '-' { return '−' }
			if codePoint == '*' { return '·' }
			return codePoint
		}
	}

	################################################################################

	class Container : Element {
		var children List<Element> = []

		over clone Element {
			var clone = new
			for child in children {
				clone.children.append(child.clone)
			}
			return clone
		}

		over updateAnchorCount {
			anchorCount = children.count + 1

			for child in children {
				child.updateAnchorCount
				anchorCount += child.anchorCount
			}
		}

		over calculateSize(renderer Renderer, parent Container, fontSize double) {
			box.width = 0
			box.upperHeight = 0
			box.lowerHeight = 0

			for child in children {
				child.calculateSize(renderer, self, fontSize)
				box.width += child.box.width
				box.upperHeight = Math.max(box.upperHeight, child.box.upperHeight)
				box.lowerHeight = Math.max(box.lowerHeight, child.box.lowerHeight)
			}

			# If the container is empty, leave some height for the cursor
			if children.isEmpty {
				box.width = 4
				box.upperHeight = fontSize / 2
				box.lowerHeight = fontSize / 2
			}
		}

		over updateLayout(x double, y double) {
			box.x = x
			box.y = y

			# Center all children about the line between the upper and lower parts
			for child in children {
				child.updateLayout(x, y + box.upperHeight - child.box.upperHeight)
				x += child.box.width
			}
		}

		over render(renderer Renderer) {
			for child in children {
				child.render(renderer)
			}
		}
	}

	################################################################################

	class Fraction : Element {
		var top = Container.new
		var bottom = Container.new

		over clone Element {
			var clone = new
			clone.top = top.clone as Container
			clone.bottom = bottom.clone as Container
			return clone
		}

		over updateAnchorCount {
			top.updateAnchorCount
			bottom.updateAnchorCount
			anchorCount = top.anchorCount + bottom.anchorCount
		}

		over calculateSize(renderer Renderer, parent Container, fontSize double) {
			top.calculateSize(renderer, null, fontSize)
			bottom.calculateSize(renderer, null, fontSize)
			box.width = Math.max(top.box.width, bottom.box.width) + 8
			box.upperHeight = top.box.height + 2
			box.lowerHeight = bottom.box.height + 4
		}

		over updateLayout(x double, y double) {
			box.x = x
			box.y = y
			top.updateLayout(x + (box.width - top.box.width) / 2, y)
			bottom.updateLayout(x + (box.width - bottom.box.width) / 2, y + box.upperHeight + 4)
		}

		over render(renderer Renderer) {
			top.render(renderer)
			bottom.render(renderer)
			renderer.addLine(box.x + 2, box.y + box.upperHeight + 4, box.x + box.width - 2, box.y + box.upperHeight + 4)
		}
	}

	################################################################################

	enum Direction {
		LEFT
		RIGHT

		def delta int {
			return self == LEFT ? -1 : 1
		}
	}

	enum Boundary {
		CHARACTER
		WORD
		LINE
	}

	interface Editor.Delegate {
		def handleEditorUpdate
	}

	class Editor {
		const _renderer Renderer
		const _originX int
		const _originY int
		const _container = Container.new
		const _anchor Anchor
		var _delegate Delegate = null

		def new(renderer Renderer, originX int, originY int) {
			_renderer = renderer
			_originX = originX
			_originY = originY
			_anchor = Anchor.new(_container)
			_updateAfterChange
		}

		def setDelegate(delegate Delegate) {
			_delegate = delegate
		}

		def render(showCursor bool) {
			_container.render(_renderer)
			if showCursor {
				_anchor.render(_renderer)
			}
		}

		def move(direction Direction, boundary Boundary) {
			switch boundary {
				case .CHARACTER {
					_anchor.globalIndex = Math.clamp(_anchor.globalIndex + direction.delta, 0, _container.anchorCount - 1)
					_anchor.updateNestedState
					_notifyDelegate
				}

				case .WORD {
				}

				case .LINE {
					_anchor.globalIndex = direction == .LEFT ? 0 : _container.anchorCount - 1
					_anchor.updateNestedState
					_notifyDelegate
				}
			}
		}

		def delete(direction Direction, boundary Boundary) {
			switch boundary {
				case .CHARACTER {
				}

				case .WORD {
				}

				case .LINE {
				}
			}
		}

		def insert(container Container) {
			var clone = container.clone as Container
			clone.updateAnchorCount
			_anchor.nestedContainer.children.insert(_anchor.indexInNestedContainer, clone.children)
			_updateAfterChange
			_anchor.globalIndex += clone.anchorCount - 1
			_anchor.updateNestedState
			_notifyDelegate
		}

		def _updateAfterChange {
			_container.calculateSize(_renderer, null, BASE_FONT_SIZE)
			_container.updateLayout(_originX, _originY)
			_container.updateAnchorCount
		}

		def _notifyDelegate {
			if _delegate != null {
				_delegate.handleEditorUpdate
			}
		}
	}

	namespace Editor {
		const BASE_FONT_SIZE = 28
	}
}
