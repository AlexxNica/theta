namespace Layout {
	const CODE_POINTS_WITH_SPACES = {
		'+': 0,
		'−': 0,
		'=': 0,
		'<': 0,
		'>': 0,
		'≤': 0,
		'≥': 0,
	}

	################################################################################

	class Box {
		var x = 0.0
		var y = 0.0
		var width = 0.0
		var upperHeight = 0.0
		var lowerHeight = 0.0

		def height double {
			return upperHeight + lowerHeight
		}
	}

	################################################################################

	interface Renderer {
		def measureGlyph(codePoint int) double
		def addGlyph(codePoint int, x double, y double, scale double) Glyph
		def addLine(ax double, ay double, bx double, by double)
	}

	################################################################################

	class Anchor {
		var container Container = null
		var indexInContainer = 0

		def render(renderer Renderer) {
			var x = container.box.x
			for i in 0..indexInContainer {
				x += container.children[i].box.width
			}
			renderer.addLine(x, container.box.y, x, container.box.y + container.box.height)
		}

		def loadFrom(rootContainer Container, rootIndex int) {
			assert(0 <= rootIndex && rootIndex < rootContainer.anchorCount)
			var count = rootContainer.children.count

			# Search the children for the anchor
			for i in 0..count {
				var child = rootContainer.children[i]

				# Check before this child
				if rootIndex == 0 {
					container = rootContainer
					indexInContainer = i
					return
				}
				rootIndex--

				# Check inside this child
				if rootIndex < child.anchorCount {
					if child is Fraction {
						var fraction = child as Fraction
						if rootIndex < fraction.top.anchorCount {
							loadFrom(fraction.top, rootIndex)
						} else {
							loadFrom(fraction.bottom, rootIndex - fraction.top.anchorCount)
						}
						return
					} else {
						assert(false)
					}
				}
				rootIndex -= child.anchorCount
			}

			# Must be after the last child
			assert(rootIndex == 0)
			container = rootContainer
			indexInContainer = count
		}
	}

	################################################################################

	class Element {
		var box = Box.new
		var anchorCount = 0

		def clone Element
		def updateAnchorCount
		def calculateSize(renderer Renderer, fontSize double)
		def updateLayout(x double, y double)
		def render(renderer Renderer)
	}

	################################################################################

	class Character : Element {
		var codePoint int
		var paddingLeft = 0.0

		over clone Element {
			return new(codePoint)
		}

		over updateAnchorCount {
			anchorCount = 0
		}

		over calculateSize(renderer Renderer, fontSize double) {
			box.width = renderer.measureGlyph(codePoint) * fontSize
			paddingLeft = 0

			if codePoint in CODE_POINTS_WITH_SPACES {
				paddingLeft = renderer.measureGlyph(' ') * fontSize
				box.width += paddingLeft * 2
			}

			box.upperHeight = fontSize / 2
			box.lowerHeight = fontSize / 2
		}

		over updateLayout(x double, y double) {
			box.x = x
			box.y = y
		}

		over render(renderer Renderer) {
			renderer.addGlyph(codePoint, box.x + paddingLeft, box.y, box.height)
		}
	}

	################################################################################

	class Container : Element {
		var children List<Element> = []

		over clone Element {
			var clone = new
			for child in children {
				clone.children.append(child.clone)
			}
			return clone
		}

		over updateAnchorCount {
			anchorCount = children.count + 1

			for child in children {
				child.updateAnchorCount
				anchorCount += child.anchorCount
			}
		}

		over calculateSize(renderer Renderer, fontSize double) {
			box.width = 0
			box.upperHeight = 0
			box.lowerHeight = 0

			for child in children {
				child.calculateSize(renderer, fontSize)
				box.width += child.box.width
				box.upperHeight = Math.max(box.upperHeight, child.box.upperHeight)
				box.lowerHeight = Math.max(box.lowerHeight, child.box.lowerHeight)
			}

			# If the container is empty, leave some height for the cursor
			if children.isEmpty {
				box.width = 4
				box.upperHeight = fontSize / 2
				box.lowerHeight = fontSize / 2
			}
		}

		over updateLayout(x double, y double) {
			box.x = x
			box.y = y

			# Center all children about the line between the upper and lower parts
			for child in children {
				child.updateLayout(x, y + box.upperHeight - child.box.upperHeight)
				x += child.box.width
			}
		}

		over render(renderer Renderer) {
			for child in children {
				child.render(renderer)
			}
		}
	}

	################################################################################

	class Fraction : Element {
		var top = Container.new
		var bottom = Container.new

		over clone Element {
			var clone = new
			clone.top = top.clone as Container
			clone.bottom = bottom.clone as Container
			return clone
		}

		over updateAnchorCount {
			top.updateAnchorCount
			bottom.updateAnchorCount
			anchorCount = top.anchorCount + bottom.anchorCount
		}

		over calculateSize(renderer Renderer, fontSize double) {
			top.calculateSize(renderer, fontSize)
			bottom.calculateSize(renderer, fontSize)
			box.width = Math.max(top.box.width, bottom.box.width) + 8
			box.upperHeight = top.box.height + 2
			box.lowerHeight = bottom.box.height + 4
		}

		over updateLayout(x double, y double) {
			box.x = x
			box.y = y
			top.updateLayout(x + (box.width - top.box.width) / 2, y)
			bottom.updateLayout(x + (box.width - bottom.box.width) / 2, y + box.upperHeight + 4)
		}

		over render(renderer Renderer) {
			top.render(renderer)
			bottom.render(renderer)
			renderer.addLine(box.x + 2, box.y + box.upperHeight + 4, box.x + box.width - 2, box.y + box.upperHeight + 4)
		}
	}

	################################################################################

	class Editor {
		const _renderer Renderer
		const _originX int
		const _originY int
		const _container = Container.new
		const _anchor = Anchor.new
		var _cursorIndex = 0

		def new(renderer Renderer, originX int, originY int) {
			_renderer = renderer
			_originX = originX
			_originY = originY
			_updateAfterChange
		}

		def render(showCursor bool) {
			_container.render(_renderer)

			if showCursor {
				_anchor.loadFrom(_container, _cursorIndex)
				_anchor.render(_renderer)
			}
		}

		def insert(container Container) {
			var clone = container.clone as Container
			clone.updateAnchorCount
			_anchor.loadFrom(_container, _cursorIndex)
			_anchor.container.children.insert(_anchor.indexInContainer, clone.children)
			_cursorIndex += clone.anchorCount
			_updateAfterChange
		}

		def _updateAfterChange {
			_container.calculateSize(_renderer, BASE_FONT_SIZE)
			_container.updateLayout(_originX, _originY)
			_container.updateAnchorCount
		}
	}

	namespace Editor {
		const BASE_FONT_SIZE = 28
	}
}
