namespace Equation {
	enum NodeKind {
		# Operand
		ERROR
		NUMBER
		SYMBOL

		# Unary
		FACTORIAL
		INVERSE
		NEGATE

		# Binary
		DIVIDE
		EXPONENT

		# Binary relational
		EQUAL
		GREATER_THAN
		GREATER_THAN_EQUAL
		LESS_THAN
		LESS_THAN_EQUAL

		# N-ary
		ADD
		CALL
		MULTIPLY
		TUPLE

		def isOperand bool {
			return self >= ERROR && self <= SYMBOL
		}

		def isUnary bool {
			return self >= FACTORIAL && self <= NEGATE
		}

		def isBinary bool {
			return self >= DIVIDE && self <= LESS_THAN_EQUAL
		}

		def isBinaryRelational bool {
			return self >= EQUAL && self <= LESS_THAN_EQUAL
		}
	}

	class Node {
		var kind NodeKind
		var range Range = null
		var internalRange Range = null
		var type Type = null
		var _value = 0.0
		var _text string = null

		# Hierarchy variables
		var _parent Node = null
		var _firstChild Node = null
		var _lastChild Node = null
		var _previousSibling Node = null
		var _nextSibling Node = null

		def _copyMembersFrom(node Node) {
			range = node.range
			internalRange = node.internalRange
			type = node.type
			_value = node._value
			_text = node._text
		}

		def clone Node {
			var node = new(kind)
			node._copyMembersFrom(self)
			for child = _firstChild; child != null; child = child._nextSibling {
				node.appendChild(child.clone)
			}
			return node
		}

		# Change self node in place to become the provided node. The parent node is
		# not changed, so become() can be called within a nested method and does not
		# need to report the updated node reference to the caller since the reference
		# does not change.
		def become(node Node) {
			assert(node._parent == null)
			if node == self {
				return
			}
			kind = node.kind
			_copyMembersFrom(node)
			while hasChildren {
				firstChild.remove
			}
			appendChildrenFrom(node)
		}

		def parent Node {
			return _parent
		}

		def firstChild Node {
			return _firstChild
		}

		def lastChild Node {
			return _lastChild
		}

		def previousSibling Node {
			return _previousSibling
		}

		def nextSibling Node {
			return _nextSibling
		}

		# This is cheaper than childCount == 0
		def hasChildren bool {
			return _firstChild != null
		}

		# This is cheaper than childCount == 1
		def hasOneChild bool {
			return hasChildren && _firstChild == _lastChild
		}

		def childCount int {
			var count = 0
			for child = _firstChild; child != null; child = child._nextSibling {
				count++
			}
			return count
		}

		def withNumber(value double) Node {
			assert(kind == .NUMBER)
			_value = value
			return self
		}

		def withString(value string) Node {
			assert(kind == .SYMBOL)
			_text = value
			return self
		}

		def withType(value Type) Node {
			type = value
			return self
		}

		def withRange(value Range) Node {
			range = value
			return self
		}

		def withInternalRange(value Range) Node {
			internalRange = value
			return self
		}

		def internalRangeOrRange Range {
			return internalRange ?? range
		}

		def withRangeFromChildren Node {
			range = Range.span(firstChild.range, lastChild.range)
			return self
		}

		def appendChild(node Node) Node {
			if node == null {
				return self
			}

			assert(node != self)
			assert(node._parent == null)
			assert(node._previousSibling == null)
			assert(node._nextSibling == null)
			node._parent = self

			if hasChildren {
				node._previousSibling = _lastChild
				_lastChild._nextSibling = node
				_lastChild = node
			} else {
				_lastChild = _firstChild = node
			}

			return self
		}

		def appendChildrenFrom(node Node) Node {
			assert(node != self)

			while node.hasChildren {
				appendChild(node.firstChild.remove)
			}

			return self
		}

		def remove Node {
			assert(_parent != null)

			if _previousSibling != null {
				assert(_previousSibling._nextSibling == self)
				_previousSibling._nextSibling = _nextSibling
			} else {
				assert(_parent._firstChild == self)
				_parent._firstChild = _nextSibling
			}

			if _nextSibling != null {
				assert(_nextSibling._previousSibling == self)
				_nextSibling._previousSibling = _previousSibling
			} else {
				assert(_parent._lastChild == self)
				_parent._lastChild = _previousSibling
			}

			_parent = null
			_previousSibling = null
			_nextSibling = null
			return self
		}

		def equals(other Node) bool {
			if kind == other.kind {
				var a = firstChild
				var b = other.firstChild

				while a != null && b != null && a.equals(b) {
					a = a.nextSibling
					b = b.nextSibling
				}

				if kind == .NUMBER && asNumber != other.asNumber {
					return false
				}

				if kind == .SYMBOL && asString != other.asString {
					return false
				}

				return a == null && b == null
			}

			return false
		}
	}

	class Node {
		def asNumber double {
			assert(kind == .NUMBER)
			return _value
		}

		def asString string {
			assert(kind == .SYMBOL)
			return _text
		}

		def unaryValue Node {
			assert(kind.isUnary)
			assert(childCount == 1)
			return _firstChild
		}

		def binaryLeft Node {
			assert(kind.isBinary)
			assert(childCount == 2)
			return _firstChild
		}

		def binaryRight Node {
			assert(kind.isBinary)
			assert(childCount == 2)
			return _lastChild
		}

		def callValue Node {
			assert(kind == .CALL)
			assert(childCount == 2)
			assert(_firstChild.kind == .SYMBOL)
			return _firstChild
		}

		def callArguments Node {
			assert(kind == .CALL)
			assert(childCount == 2)
			assert(_lastChild.kind == .TUPLE)
			return _lastChild
		}

		# This is just for debugging
		def toString string {
			if kind == .NUMBER { return asNumber.toString }
			if kind == .SYMBOL { return asString }

			# Use nested S-expressions for display
			var text = kind.toString
			if hasChildren {
				text = "(" + text
				for child = firstChild; child != null; child = child.nextSibling {
					text += child.kind.isOperand ? " " + child.toString : "\n  " + "\n  ".join(child.toString.split("\n"))
				}
				text += ")"
			}
			return text
		}
	}

	namespace Node {
		def createError Node {
			return new(.ERROR)
		}

		def createNumber(value double) Node {
			return new(.NUMBER).withNumber(value).withType(.NUMBER)
		}

		def createSymbol(text string) Node {
			return new(.SYMBOL).withString(text)
		}

		def createUnary(kind NodeKind, value Node) Node {
			assert(kind.isUnary)
			return new(kind).appendChild(value)
		}

		def createBinary(kind NodeKind, left Node, right Node) Node {
			assert(kind.isBinary)
			return new(kind).appendChild(left).appendChild(right)
		}

		def createAdd Node {
			return new(.ADD)
		}

		def createCall(value Node, arguments Node) Node {
			assert(value.kind == .SYMBOL || value.kind == .INVERSE)
			assert(arguments.kind == .TUPLE)
			return new(.CALL).appendChild(value).appendChild(arguments)
		}

		def createSingleArgumentCall(value Node, argument Node) Node {
			return createCall(value, Node.createTuple.appendChild(argument))
		}

		def createMultiply Node {
			return new(.MULTIPLY)
		}

		def createTuple Node {
			return new(.TUPLE)
		}
	}
}
