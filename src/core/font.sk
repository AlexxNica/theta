enum Command {
	MOVE_TO
	LINE_TO
	CURVE_TO
	CLOSE
}

enum TriangleKind {
	SOLID
	QUADRATIC_CURVE
}

class Font {
	const _data DataArray
	const glyphCompiler GlyphCompiler
	var ascender = 0.0
	var descender = 0.0
	var _scale = 0.0
	var _glyphs IntMap<Glyph> = {}

	def new(data DataArray, pool GPU.BufferPool) {
		_data = data
		glyphCompiler = GlyphCompiler.new(pool)
		_scale = 1.0 / data.readShort
		ascender = data.readShort * _scale
		descender = data.readShort * _scale

		for i in 0..data.readShort {
			var glyph = Glyph.new
			glyph.codePoint = data.readShort
			glyph.advanceWidth = data.readShort * _scale
			glyph.byteOffset = data.readInt
			glyph.byteLength = data.readShort
			_glyphs[glyph.codePoint] = glyph
		}
	}

	def glyph(codePoint int) Glyph {
		var glyph = _glyphs.get(codePoint, null)

		if glyph == null {
			glyph = _glyphs.get(0, null)
			assert(glyph != null)
		}

		if glyph.area == null && glyph.codePoint != ' ' {
			var end = glyph.byteOffset + glyph.byteLength
			var scale = _scale

			_data.seekTo(glyph.byteOffset)
			glyphCompiler.begin(glyph)

			while _data.readOffset < end {
				switch _data.readByte as Command {
					case .MOVE_TO {
						var x = _data.readShort * scale
						var y = _data.readShort * scale + ascender
						glyphCompiler.moveTo(x, y)
					}

					case .LINE_TO {
						var x = _data.readShort * scale
						var y = _data.readShort * scale + ascender
						glyphCompiler.lineTo(x, y)
					}

					case .CURVE_TO {
						var cx = _data.readShort * scale
						var cy = _data.readShort * scale + ascender
						var x = _data.readShort * scale
						var y = _data.readShort * scale + ascender
						glyphCompiler.curveTo(cx, cy, x, y)
					}

					case .CLOSE {
						glyphCompiler.close
					}

					default {
						assert(false)
					}
				}
			}

			glyphCompiler.end
		}

		return glyph
	}
}

class Glyph {
	var codePoint = TEMPORARY_CODE_POINT
	var advanceWidth = 0.0
	var byteOffset = 0
	var byteLength = 0
	var minX = 0.0
	var minY = 0.0
	var maxX = 0.0
	var maxY = 0.0
	var area GPU.BufferArea = null

	def free {
		area.free
		area = null
	}
}

namespace Glyph {
	const TEMPORARY_CODE_POINT = -1
	const VERTEX_FORMAT = GPU.VertexFormat.new.add(GLSLX_NAME_POSITION4, .FLOAT, 4)
}

class GlyphCompiler {
	const _pool GPU.BufferPool
	const _vertices = DataArray.new
	var _firstX = 0.0
	var _firstY = 0.0
	var _currentX = 0.0
	var _currentY = 0.0
	var _contourCount = 0
	var _glyph Glyph = null

	def begin(glyph Glyph) {
		assert(glyph.area == null)
		glyph.minX = glyph.minY = Math.INFINITY
		glyph.maxX = glyph.maxY = -Math.INFINITY
		_glyph = glyph
		_vertices.clear
	}

	def moveTo(x double, y double) {
		_firstX = _currentX = x
		_firstY = _currentY = y
		_contourCount = 0
	}

	def lineTo(x double, y double) {
		if ++_contourCount >= 2 {
			_appendTriangle(_firstX, _firstY, _currentX, _currentY, x, y, .SOLID)
		}

		_currentX = x
		_currentY = y
	}

	def curveTo(cx double, cy double, x double, y double) {
		if ++_contourCount >= 2 {
			_appendTriangle(_firstX, _firstY, _currentX, _currentY, x, y, .SOLID)
		}

		_appendTriangle(_currentX, _currentY, cx, cy, x, y, .QUADRATIC_CURVE)
		_currentX = x
		_currentY = y
	}

	def close {
		_currentX = _firstX
		_currentY = _firstY
		_contourCount = 0
	}

	def end {
		_glyph.area = _pool.allocate(Glyph.VERTEX_FORMAT, _vertices.bytes)
	}

	def _appendTriangle(ax double, ay double, bx double, by double, cx double, cy double, kind TriangleKind) {
		switch kind {
			case .SOLID {
				_appendVertex(ax, ay, 0, 1)
				_appendVertex(bx, by, 0, 1)
				_appendVertex(cx, cy, 0, 1)
			}

			case .QUADRATIC_CURVE {
				_appendVertex(ax, ay, 0, 0)
				_appendVertex(bx, by, 0.5, 0)
				_appendVertex(cx, cy, 1, 1)
			}
		}
	}

	def _appendVertex(x double, y double, s double, t double) {
		var glyph = _glyph
		glyph.minX = Math.min(glyph.minX, x)
		glyph.minY = Math.min(glyph.minY, y)
		glyph.maxX = Math.max(glyph.maxX, x)
		glyph.maxY = Math.max(glyph.maxY, y)
		_vertices.appendFloat(x).appendFloat(y).appendFloat(s).appendFloat(t)
	}
}
