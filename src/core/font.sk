enum Command {
	MOVE_TO
	LINE_TO
	CURVE_TO
	CLOSE
}

enum TriangleKind {
	SOLID
	QUADRATIC_CURVE
}

class Font {
	const _data DataArray
	const _pool GPU.BufferPool
	var ascender = 0.0
	var descender = 0.0
	var _scale = 0.0
	var _glyphs IntMap<Glyph> = {}

	def new(data DataArray, pool GPU.BufferPool) {
		_data = data
		_pool = pool
		_scale = 1.0 / data.readShort
		ascender = data.readShort * _scale
		descender = data.readShort * _scale

		for i in 0..data.readShort {
			var glyph = Glyph.new
			glyph.codePoint = data.readShort
			glyph.advanceWidth = data.readShort * _scale
			glyph.byteOffset = data.readInt
			glyph.byteLength = data.readShort
			_glyphs[glyph.codePoint] = glyph
		}
	}

	def glyph(codePoint int) Glyph {
		var glyph = _glyphs.get(codePoint, null)

		if glyph == null {
			glyph = _glyphs.get(0, null)
			assert(glyph != null)
		}

		if glyph.area == null && glyph.codePoint != ' ' {
			var end = glyph.byteOffset + glyph.byteLength
			var scale = _scale
			var firstX = 0.0
			var firstY = 0.0
			var currentX = 0.0
			var currentY = 0.0
			var contourCount = 0

			_data.seekTo(glyph.byteOffset)

			while _data.readOffset < end {
				switch _data.readByte as Command {
					case .MOVE_TO {
						firstX = currentX = _data.readShort * scale
						firstY = currentY = _data.readShort * scale
						contourCount = 0
					}

					case .LINE_TO {
						var x = _data.readShort * scale
						var y = _data.readShort * scale

						if ++contourCount >= 2 {
							glyph.appendTriangle(firstX, firstY, currentX, currentY, x, y, .SOLID)
						}

						currentX = x
						currentY = y
					}

					case .CURVE_TO {
						var x1 = _data.readShort * scale
						var y1 = _data.readShort * scale
						var x = _data.readShort * scale
						var y = _data.readShort * scale

						if ++contourCount >= 2 {
							glyph.appendTriangle(firstX, firstY, currentX, currentY, x, y, .SOLID)
						}

						glyph.appendTriangle(currentX, currentY, x1, y1, x, y, .QUADRATIC_CURVE)
						currentX = x
						currentY = y
					}

					case .CLOSE {
						currentX = firstX
						currentY = firstY
						contourCount = 0
					}

					default {
						assert(false)
					}
				}
			}

			glyph.compile(_pool)
		}

		return glyph
	}
}

class Glyph {
	var codePoint = 0
	var advanceWidth = 0.0
	var byteOffset = 0
	var byteLength = 0
	var minX = Math.INFINITY
	var minY = Math.INFINITY
	var maxX = -Math.INFINITY
	var maxY = -Math.INFINITY
	var area GPU.BufferArea = null

	def appendTriangle(ax double, ay double, bx double, by double, cx double, cy double, kind TriangleKind) {
		switch kind {
			case .SOLID {
				appendVertex(ax, ay, 0, 1)
				appendVertex(bx, by, 0, 1)
				appendVertex(cx, cy, 0, 1)
			}

			case .QUADRATIC_CURVE {
				appendVertex(ax, ay, 0, 0)
				appendVertex(bx, by, 0.5, 0)
				appendVertex(cx, cy, 1, 1)
			}
		}
	}

	def appendVertex(x double, y double, s double, t double) {
		minX = Math.min(minX, x)
		minY = Math.min(minY, y)
		maxX = Math.max(maxX, x)
		maxY = Math.max(maxY, y)
		_vertices.appendFloat(x).appendFloat(y).appendFloat(s).appendFloat(t)
	}

	def compile(pool GPU.BufferPool) {
		area = pool.allocate(VERTEX_FORMAT, _vertices.bytes)
		_vertices.clear
	}
}

namespace Glyph {
	const VERTEX_FORMAT = GPU.VertexFormat.new.add(GLSLX_NAME_POSITION4, .FLOAT, 4)
	const _vertices = DataArray.new
}
