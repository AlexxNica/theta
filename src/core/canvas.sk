class Canvas {
	var _font Font
	var _quadFormat = GPU.VertexFormat.new.add(GLSLX_NAME_POSITION2, .FLOAT, 2)
	var _stencilFormat = GPU.VertexFormat.new.add(GLSLX_NAME_POSITION4, .FLOAT, 4)
	var _context GPU.Context
	var _pool GPU.BufferPool
	var _smooth GPU.SmoothRenderer
	var _demoMaterial GPU.Material
	var _stencilMaterial GPU.Material
	var _coverMaterial GPU.Material
	var _quad GPU.BufferArea
	var _glyph GPU.BufferArea

	# Viewport size
	var _width = 0
	var _height = 0
	var _density = 1.0

	# Event handlers
	var onScroll fn(double, double) = null
	var onPinch fn(double, double, double) = null
	var onResize fn() = null

	def new(fontData DataArray) {
		_font = Font.new(fontData)
		_context = GPU.HTMLContext.new
		_pool = GPU.BufferPool.new(_context)
		_smooth = GPU.SmoothRenderer.new(_context, _pool)
		(_context as GPU.HTMLContext).gl.getExtension("OES_standard_derivatives")
		_demoMaterial = _context.createMaterial(_quadFormat, GLSLX_SOURCE_DEMO_VERTEX, GLSLX_SOURCE_DEMO_FRAGMENT)
		_stencilMaterial = _context.createMaterial(_stencilFormat, GLSLX_SOURCE_STENCIL_VERTEX, GLSLX_SOURCE_STENCIL_FRAGMENT)
		_coverMaterial = _context.createMaterial(_quadFormat, GLSLX_SOURCE_COVER_VERTEX, GLSLX_SOURCE_COVER_FRAGMENT)
		_attachToDOM(_context as GPU.HTMLContext)
		_quad = _pool.allocate(_quadFormat, DataArray.new.appendFloats([-1, -1, 1, -1, -1, 1, 1, 1]).bytes)
		_glyph = _pool.allocate(_stencilFormat, _font.glyph('Î²').vertices.bytes)
	}

	def _attachToDOM(context GPU.HTMLContext) {
		var isOSX = navigator.platform == "MacIntel" || navigator.platform == "MacPPC"
		var canvas = context.gl.canvas

		var resize = => {
			_width = window.innerWidth
			_height = window.innerHeight
			_density = window.devicePixelRatio

			var width = Math.round(_width * _density) as int
			var height = Math.round(_height * _density) as int

			context.resize(width, height)

			var transform = Transform.new
			transform.translate(-1, 1)
			transform.scale(2.0 / _width, -2.0 / _height)
			_smooth.setTransformAndPixelScale(transform, _density)

			if onResize != null {
				onResize()
			}
		}

		canvas.addEventListener("wheel", (e HTMLWheelEvent) => {
			var swap = !isOSX && e.shiftKey
			if e.ctrlKey || isOSX && e.metaKey {
				if onPinch != null {
					onPinch(e.pageX, e.pageY, e.deltaY)
				}
			} else {
				if onScroll != null {
					onScroll(
						swap ? e.deltaY : e.deltaX,
						swap ? e.deltaX : e.deltaY)
				}
			}
			e.preventDefault
		})

		window.addEventListener("resize", resize)
		document.body.appendChild(canvas)
		resize()
	}

	def clear {
		_context.clear(.ALL, .WHITE)
	}

	def drawGrid(origin Vector, scale double) {
		var log = Math.log(scale / 100) / Math.log(10)
		var step = Math.pow(10, Math.round(log))
		var ratio = step / scale
		var left = Math.ceil(-origin.x * ratio) as int
		var top = Math.ceil(-origin.y * ratio) as int
		var right = Math.ceil((_width - origin.x) * ratio) as int
		var bottom = Math.ceil((_height - origin.y) * ratio) as int

		for x in left..right {
			var tx = origin.x + x * scale / step
			_smooth.strokeLine(tx, 0, tx, _height, x == 0 ? .BLACK : x % 10 == 0 ? GRID_DARK : GRID_LIGHT, x == 0 ? 2 : 1)
		}

		for y in top..bottom {
			var ty = origin.y + y * scale / step
			_smooth.strokeLine(0, ty, _width, ty, y == 0 ? .BLACK : y % 10 == 0 ? GRID_DARK : GRID_LIGHT, y == 0 ? 2 : 1)
		}

		_smooth.flush
	}

	def drawFunction(origin Vector, scale double) {
		_demoMaterial.setUniformVec4(GLSLX_NAME_VALUE4, origin.x, origin.y, scale, _height)
		_context.setPremultipliedBlendState
		_context.draw(.TRIANGLE_STRIP, _demoMaterial, _quad)

		var transform = Transform.new
		transform.translate(-1, 1)
		transform.scale(2.0 / _width, -2.0 / _height)
		transform.translate(origin)
		transform.scale(scale)

		_context.setKeepBlendState
		_context.setStencilState(XOR_STATE)
		_stencilMaterial.setUniformMat3(GLSLX_NAME_MATRIX3, transform)
		_context.draw(.TRIANGLES, _stencilMaterial, _glyph)

		_context.setPremultipliedBlendState
		_context.setStencilState(NONZERO_STATE)
		_coverMaterial.setUniformVec4(GLSLX_NAME_VALUE4, 0, 0, 0, 1)
		_coverMaterial.setUniformMat3(GLSLX_NAME_MATRIX3, transform)
		_context.draw(.TRIANGLE_STRIP, _coverMaterial, _quad)

		_context.setStencilState(.NONE)
	}
}

namespace Canvas {
	const GRID_LIGHT = Color.new(0, 0, 0, 31)
	const GRID_DARK = Color.new(0, 0, 0, 127)
	const XOR_STATE = GPU.StencilState.new(GPU.StencilFaceState.new(0, .ALWAYS, 1, 1, .INVERT, .INVERT, .INVERT))
	const NONZERO_STATE = GPU.StencilState.new(GPU.StencilFaceState.new(0, .NOT_EQUAL, 1, 1, .ZERO, .ZERO, .ZERO))
}
